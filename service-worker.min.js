async function SaveCache(e,t){const n=t.clone();return(await caches.open(CACHE)).put(e,n)}function endsWithAny(e,t){return e.some(function(e){return t.endsWith(e)})}const CACHE=["v1"],refreshFiles=["fish.js","gt.bell.js","locale-ko.js","nodes.js","timers.js","index.html","style.css","manifest.json"];self.addEventListener("install",function(e){console.log("The service worker is being installed."),self.skipWaiting(),e.waitUntil(async function(){return caches.open(CACHE).then(function(e){return e.addAll(["./index.html"])})}())}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(!CACHE.includes(e))return caches.delete(e)}))).then(()=>{console.log("Unused cache deleted.")}))}),self.addEventListener("fetch",e=>{const t=new URL(e.request.url);if(t.origin!=location.origin)return e.respondWith(fetch(e.request));endsWithAny(refreshFiles,t.pathname)?e.respondWith(async function(){try{const t=await fetch(e.request);return SaveCache(e.request,t),t}catch(t){return await caches.match(e.request)}}()):e.respondWith(async function(){const t=await caches.match(e.request);if(t)return t;const n=await fetch(e.request);return SaveCache(e.request,n),n}())});